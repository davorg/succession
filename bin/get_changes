#!/usr/bin/perl

use strict;
use warnings;
use feature 'say';

use Data::Dumper;
use Dancer2::Core::Request;

use Succession::App;

my $app = Succession::App->new({ is_date_page => 1, request => bless {}, 'Dancer2::Core::Request' });

my $sch = $app->model->schema;
my $ch_rs = $sch->resultset('ChangeDate');
my $pe_rs = $sch->resultset('Person');

my @changes = {
  date => $app->earliest,
  succ => [ map { $_->id } @{ $app->model->succession_on_date($app->earliest) } ],
};

while (my $cd = $ch_rs->next) {
  push @changes, {
    date => $cd->change_date,
    succ => [ split /:/, $cd->succession ],
  };
}

for (1 .. $#changes) {
  my @new = @{$changes[$_]->{succ}};
  my @old = @{$changes[$_-1]->{succ}};

  my $new_i = my $old_i = 0;

  while ($new_i <= $#new and $old_i <= $#old) {
    if ($new[$new_i] eq $old[$old_i]) {
      $old_i++; $new_i++;
      next;
    }

    if ($new[$new_i+1] eq $old[$old_i]) {
      say $changes[$_]{date}->ymd . " - $new[$new_i] added";
      $new_i += 2; $old_i++;
      next;
    } elsif ($new[$new_i] eq "$old[$old_i]x") {
      say $changes[$_]{date}->ymd . " $old[$old_i] was excluded";
      $old_i++; $new_i++;
      next;
    } elsif ("$new[$new_i]x" eq $old[$old_i]) {
      say $changes[$_]{date}->ymd . " $new[$new_i] was unexcluded";
      $old_i++; $new_i++;
      next;
    } elsif ($new[$new_i] eq $old[$old_i+1]) {
      say $changes[$_]{date}->ymd . " - $old[$old_i] deleted";
      $old_i += 2; $new_i++;
      next;
    } else {
      say $changes[$_]{date}->ymd . " Weirdness: $old[$old_i]/$new[$new_i] and $old[$old_i+1]/$new[$new_i+1]";
      $old_i++; $new_i++;
      next;
    }
  }
}	

# say Dumper \@changes;

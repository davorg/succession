#!/usr/bin/perl

use strict;
use warnings;
use feature qw[say state];

use Data::Dumper;
use DateTime::Format::Strptime;
use Dancer2::Core::Request;

use Succession::App;

my $debug = $ENV{SUCC_DEBUG} // 0;

my $app = Succession::App->new();

my $sch = $app->model->schema;
my $ch_rs = $sch->resultset('ChangeDate');
my $pe_rs = $sch->resultset('Person');

my $date;

if (@ARGV) {
  $date = DateTime::Format::Strptime->new(pattern => '%Y-%m-%d')
    ->parse_datetime($ARGV[0]);
} else {
  $date = $app->earliest;
}

my @changes = {
  date => $date,
  succ => [ map { $_->id } @{ $app->model->succession_on_date($app->earliest) } ],
};

push @changes, map { {
  cd   => $_,
  date => $_->change_date,
  succ => [ split /:/, $_->succession ],
} } $ch_rs->all;

for (1 .. $#changes) {
  process_change($_);
}

sub process_change {
  $_ = shift;

  my @new = @{$changes[$_]->{succ}};
  my @old = @{$changes[$_-1]->{succ}};

  my $new_i = my $old_i = 0;

  while ($new_i <= $#new and $old_i <= $#old) {
    if ($new[$new_i] eq $old[$old_i]) {
      # No changes here.
      $old_i++; $new_i++;
      next;
    }

    my ($old_incr, $new_incr) = process_position(
      $old[$old_i], $new[$new_i], $changes[$_],
    );

    $old_i += $old_incr;
    $new_i += $new_incr;
  }
}

sub process_position {
  my ($old, $new, $change) = @_;

  my $old_p = get_person($old);
  my $new_p = get_person($new);

  # Someone became sovereign and popped off the top of the list
  if ($old_p->sovereigns->first and
    $old_p->sovereigns->first->start == $change->{date}) {
    $change->{cd}->add_to_changes({
      person_id => $old,
      description => 'became sovereign',
    });
    debug($old_p->name, " became sovereign");
    return (1, 0);
  }

  # Someone was born and moved below them moved down a place
  if ($new_p->born == $change->{date}) {
      $change->{cd}->add_to_changes({
        person_id => $new_p->id,
        description => 'was born',
      });
    debug($new_p->name, ' was born');
    return (0, 1);
  }

  # Someone was excluded and  everyone below them moved up a place
  if ($new eq "${old}x") {
    # Same number, but an x has been added
    $change->{cd}->add_to_changes({
      person_id => $old,
      description => 'was excluded',
    });
    debug($old_p->name, ' was excluded');
    return (1, 1);
  }

  # Someone was included and everyone below them moved down a place
  if ("${new}x" eq $old) {
    # Same number, but the x has been removed
    $change->{cd}->add_to_changes({
      person_id => $new,
      description => 'was unexcluded',
    });
    debug($new_p->name, ' was unexcluded');
    return (1, 1);
  }

  # Someone died and everyone below them moved up a place
  if ($old_p->died->clone->add(days => 1) == $change->{date}) {
    $change->{cd}->add_to_changes({
      person_id => $old_p->id,
      description => 'died',
    });
    debug($old_p->name, ' died');
    return (1, 0);
  }

  # Shouldn't get here :-(
  warn 'Date: ', $change->{date}, "\n",
       'Old: ', $old_p->name, ', ', $old_p->born, ' - ', $old_p->died, "\n",
       'New: ', $new_p->name, ', ', $new_p->born, ' - ', $new_p->died, "\n",
       $change->{date}->ymd . " Weirdness: $old/$new\n";
  die  $change->{cd}->succession;
}

# say Dumper \@changes;

sub get_person {
  state $people;

  my $id = shift;

  $id =~ s/x$//;

  $people->{$id} //= $pe_rs->find($id);

  return $people->{$id};
}

sub debug {
  return unless $debug;

  say @_;
}

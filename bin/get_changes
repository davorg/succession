#!/usr/bin/perl

use strict;
use warnings;
use feature qw[say state];

use Data::Dumper;
use Dancer2::Core::Request;

use Succession::App;

my $app = Succession::App->new({ request => bless {}, 'Dancer2::Core::Request' });

my $sch = $app->model->schema;
my $ch_rs = $sch->resultset('ChangeDate');
my $pe_rs = $sch->resultset('Person');

my @changes = {
  date => $app->earliest,
  succ => [ map { $_->id } @{ $app->model->succession_on_date($app->earliest) } ],
};

while (my $cd = $ch_rs->next) {
  push @changes, {
    cd   => $cd,
    date => $cd->change_date,
    succ => [ split /:/, $cd->succession ],
  };
}

for (1 .. $#changes) {
  my @new = @{$changes[$_]->{succ}};
  my @old = @{$changes[$_-1]->{succ}};

  my $new_i = my $old_i = 0;

  while ($new_i <= $#new and $old_i <= $#old) {
    if ($new[$new_i] eq $old[$old_i]) {
      # No changes here.
      $old_i++; $new_i++;
      next;
    }

    my $old_p = get_person($old[$old_i]);
    my $new_p = get_person($new[$new_i]);

    if ($old_p->sovereigns->first and
      $old_p->sovereigns->first->start == $changes[$_]{date}) {
      $changes[$_]{cd}->add_to_changes({
        person_id => $old[$old_i],
        description => 'became sovereign',
      });
      $old_i++;
      next;
    }
    
    if ($new_p->born == $changes[$_]{date}) {
      $changes[$_]{cd}->add_to_changes({
        person_id => $new_p->id,
        description => 'was born',
      });
      $new_i += 2; $old_i++;
      next;
    }
    
    if ($new[$new_i] eq "$old[$old_i]x") {
      # Same number, but an x has been added
      $changes[$_]{cd}->add_to_changes({
        person_id => $old[$old_i],
        description => 'was excluded',
      });
      $old_i++; $new_i++;
      next;
    }
    
    if ("$new[$new_i]x" eq $old[$old_i]) {
      # Same number, but the x has been removed
      $changes[$_]{cd}->add_to_changes({
        person_id => $new[$new_i],
        description => 'was unexcluded',
      });
      $old_i++; $new_i++;
      next;
    }
    
    if ($old_p->died->clone->add(days => 1) == $changes[$_]{date}) {
      $changes[$_]{cd}->add_to_changes({
        person_id => $old_p->id,
        description => 'died',
      });
      $old_i += 2; $new_i++;
      next;
    }

    say 'Date: ', $changes[$_]{date};
    say 'Old: ', $old_p->born, ' - ', $old_p->died;
    say 'New: ', $new_p->born, ' - ', $new_p->died;

    say $changes[$_]{date}->ymd .
        " Weirdness: $old[$old_i]/$new[$new_i]" .
        " and $old[$old_i+1]/$new[$new_i+1]";
    $old_i++; $new_i++;
  }
}

# say Dumper \@changes;

sub get_person {
  state $people;

  my $id = shift;

  $people->{$id} or ($people->{$id}) = $pe_rs->find($id);

  return $people->{$id};
}
